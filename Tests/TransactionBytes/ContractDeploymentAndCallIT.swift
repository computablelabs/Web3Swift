//
// This source file is part of the Web3Swift.io open source project
// Copyright 2018 The Web3Swift Authors
// Licensed under Apache License v2.0
//
// ContractDeploymentAndCallIT.swift
//
// Created by Timofey Solonin on 10/05/2018
//

import CryptoSwift
import Nimble
import Quick
@testable import Web3Swift

//swiftlint:disable function_body_length

//Deployed getter contract data() method return
fileprivate final class DeployedGetterContractArgument: BytesScalar {

    private let network: Network
    private let sender: Actor
    private let contractCode: BytesScalar
    private let arguments: [ABIEncodedParameter]

    /**
    Ctor

    - parameters:
        - network: network where to deploy and read
        - sender: sender account
        - contractCode: raw contract declaration
        - arguments: contract ctor arguments
    */
    init(
        network: Network,
        sender: Actor,
        contractCode: BytesScalar,
        arguments: [ABIEncodedParameter]
    ) {
        self.network = network
        self.sender = sender
        self.contractCode = contractCode
        self.arguments = arguments
    }

    /**
    - returns:
    data() method call from a deployed contract
    */
    func value() throws -> Data {
        guard try SendRawTransactionProcedure(
            network: network,
            transactionBytes: EthContractCreationBytes(
                network: network,
                senderKey: sender.privateKey(),
                weiAmount: EthNumber(
                    value: 0
                ),
                contractCall: EncodedContract(
                    byteCode: contractCode,
                    arguments: arguments
                )
            )
        ).call()["result"].string().isEmpty == false else {
            fatalError("Contract could not be deployed")
        }
        return try EthContractCall(
            network: network,
            senderAddress: sender.address(),
            contractAddress: ComputedContractAddress(
                ownerAddress: sender.address(),
                transactionNonce: EthNumber(
                    value: IntegersDifference(
                        minuend: EthInteger(
                            hex: TransactionsCount(
                                transactions: EthTransactions(
                                    network: network,
                                    address: sender.address(),
                                    blockChainState: PendingBlockChainState()
                                )
                            )
                        ),
                        subtrahend: SimpleInteger(
                            integer: 1
                        )
                    )
                )
            ),
            functionCall: EncodedABIFunction(
                signature: SimpleString(
                    string: "data()"
                ),
                parameters: []
            )
        ).value()
    }

}

final class ContractDeploymentAndCallIT: XCTestCase {

    func testGetterContractIsDeployedAndReadCorrectly() {
        Array<
            (
                contractCode: BytesScalar,
                arguments: [ABIEncodedParameter]
            )
        >(
            [
                (
                    contractCode: BytesFromHexString(
                        hex: "608060405234801561001057600080fd5b5060405160208061010c83398101806040528101908080519060200190929190505050806000806101000a81548160ff021916908360ff1602179055505060b08061005c6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a146044575b600080fd5b348015604f57600080fd5b5060566072565b604051808260ff1660ff16815260200191505060405180910390f35b6000809054906101000a900460ff16815600a165627a7a723058209ea75712924b4c036e4c802b64f399b06231ee023f7ff10b3eb8e9fc81aff8a10029"
                    ),
                    arguments: [
                        ABIUnsignedNumber(
                            origin: EthNumber(
                                value: 42
                            )
                        )
                    ] as [ABIEncodedParameter]
                ),
                (
                    contractCode: BytesFromHexString(
                        hex: "608060405234801561001057600080fd5b506040516102a43803806102a4833981018060405281019080805182019291905050508060009080519060200190610049929190610050565b50506100f5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009157805160ff19168380011785556100bf565b828001600101855582156100bf579182015b828111156100be5782518255916020019190600101906100a3565b5b5090506100cc91906100d0565b5090565b6100f291905b808211156100ee5760008160009055506001016100d6565b5090565b90565b6101a0806101046000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a14610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016c5780601f106101415761010080835404028352916020019161016c565b820191906000526020600020905b81548152906001019060200180831161014f57829003601f168201915b5050505050815600a165627a7a72305820378418d75cc0af4f6b0d8459762f26285d45d4718b8f734259ddf2370402801b0029"
                    ),
                    arguments: [
                        ABIVariableBytes(
                            origin: BytesFromHexString(
                                hex: "12345678"
                            )
                        )
                    ] as [ABIEncodedParameter]
                ),
                (
                    contractCode: BytesFromHexString(
                        hex: "608060405234801561001057600080fd5b506040516020806100f38339810180604052810190808051906020019092919050505080600081600019169055505060a68061004d6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a146044575b600080fd5b348015604f57600080fd5b5060566074565b60405180826000191660001916815260200191505060405180910390f35b600054815600a165627a7a72305820e1b19747c0a2fee9010c455b8942da7b3d13ad60d7182ef193fab6777de7d6d90029"
                    ),
                    arguments: [
                        ABIFixedBytes(
                            origin: BytesFromHexString(
                                hex: "12345678"
                            )
                        )
                    ] as [ABIEncodedParameter]
                ),
                (
                    contractCode: BytesFromHexString(
                        hex: "608060405234801561001057600080fd5b50604051610211380380610211833981018060405281019080805182019291905050508060009080519060200190610049929190610050565b50506100c8565b828054828255906000526020600020908101928215610092579160200282015b82811115610091578251829060001916905591602001919060010190610070565b5b50905061009f91906100a3565b5090565b6100c591905b808211156100c15760008160009055506001016100a9565b5090565b90565b61013a806100d76000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a14610046575b600080fd5b34801561005257600080fd5b5061005b6100b2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561009e578082015181840152602081019050610083565b505050509050019250505060405180910390f35b6060600080548060200260200160405190810160405280929190818152602001828054801561010457602002820191906000526020600020905b815460001916815260200190600101908083116100ec575b50505050509050905600a165627a7a72305820f514b4b177e5d8d4abce081a618186fd8438e4b8b74952e019a2ce755673f70f0029"
                    ),
                    arguments: [
                        ABIDynamicCollection(
                            parameters: [
                                ABIFixedBytes(
                                    origin: BytesFromHexString(
                                        hex: "12"
                                    )
                                ),
                                ABIFixedBytes(
                                    origin: BytesFromHexString(
                                        hex: "34"
                                    )
                                ),
                                ABIFixedBytes(
                                    origin: BytesFromHexString(
                                        hex: "56"
                                    )
                                ),
                                ABIFixedBytes(
                                    origin: BytesFromHexString(
                                        hex: "78"
                                    )
                                )
                            ]
                        )
                    ] as [ABIEncodedParameter]
                ),
                (
                    contractCode: BytesFromHexString(
                        hex: "60806040523480156200001157600080fd5b5060405162000992380380620009928339810180604052620000379190810190620002b6565b80600090805190602001906200004f92919062000057565b505062000385565b828054828255906000526020600020908101928215620000ab579160200282015b82811115620000aa57825182908051906020019062000099929190620000be565b509160200191906001019062000078565b5b509050620000ba919062000116565b5090565b82805482825590600052602060002090810192821562000103579160200282015b8281111562000102578251829060001916905591602001919060010190620000df565b5b50905062000112919062000147565b5090565b6200014491905b808211156200014057600081816200013691906200016f565b506001016200011d565b5090565b90565b6200016c91905b80821115620001685760008160009055506001016200014e565b5090565b90565b50805460008255906000526020600020908101906200018f919062000147565b50565b600082601f8301121515620001a657600080fd5b8151620001bd620001b78262000329565b620002fb565b9150818183526020840193506020810190508360005b83811015620002075781518601620001ec888262000211565b845260208401935060208301925050600181019050620001d3565b5050505092915050565b600082601f83011215156200022557600080fd5b81516200023c620002368262000352565b620002fb565b915081818352602084019350602081019050838560208402820111156200026257600080fd5b60005b838110156200029657816200027b8882620002a0565b84526020840193506020830192505060018101905062000265565b5050505092915050565b6000620002ae82516200037b565b905092915050565b600060208284031215620002c957600080fd5b600082015167ffffffffffffffff811115620002e457600080fd5b620002f28482850162000192565b91505092915050565b6000604051905081810181811067ffffffffffffffff821117156200031f57600080fd5b8060405250919050565b600067ffffffffffffffff8211156200034157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200036a57600080fd5b602082029050602081019050919050565b6000819050919050565b6105fd80620003956000396000f30060806040526004361061006c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062dad317146100715780632424ebe71461009c57806373d4a13a146100d957806381fda31614610104578063da33465514610141575b600080fd5b34801561007d57600080fd5b5061008661017e565b604051610093919061051b565b60405180910390f35b3480156100a857600080fd5b506100c360048036036100be9190810190610315565b61018a565b6040516100d0919061051b565b60405180910390f35b3480156100e557600080fd5b506100ee6101af565b6040516100fb91906104bc565b60405180910390f35b34801561011057600080fd5b5061012b6004803603610126919081019061033e565b610252565b6040516101389190610500565b60405180910390f35b34801561014d57600080fd5b5061016860048036036101639190810190610315565b61028c565b60405161017591906104de565b60405180910390f35b60008080549050905090565b6000808281548110151561019a57fe5b90600052602060002001805490509050919050565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156102495783829060005260206000200180548060200260200160405190810160405280929190818152602001828054801561023557602002820191906000526020600020905b8154600019168152602001906001019080831161021d575b5050505050815260200190600101906101d3565b50505050905090565b6000808381548110151561026257fe5b906000526020600020018281548110151561027957fe5b9060005260206000200154905092915050565b606060008281548110151561029d57fe5b906000526020600020018054806020026020016040519081016040528092919081815260200182805480156102f557602002820191906000526020600020905b815460001916815260200190600101908083116102dd575b50505050509050919050565b600061030d82356105b9565b905092915050565b60006020828403121561032757600080fd5b600061033584828501610301565b91505092915050565b6000806040838503121561035157600080fd5b600061035f85828601610301565b925050602061037085828601610301565b9150509250929050565b60006103858261055d565b8084526020840193508360208202850161039e85610536565b60005b848110156103d75783830388526103b9838351610443565b92506103c48261057e565b91506020880197506001810190506103a1565b508196508694505050505092915050565b60006103f382610573565b80845260208401935061040583610550565b60005b828110156104375761041b86835161049e565b61042482610598565b9150602086019550600181019050610408565b50849250505092915050565b600061044e82610568565b80845260208401935061046083610543565b60005b828110156104925761047686835161049e565b61047f8261058b565b9150602086019550600181019050610463565b50849250505092915050565b6104a7816105a5565b82525050565b6104b6816105af565b82525050565b600060208201905081810360008301526104d6818461037a565b905092915050565b600060208201905081810360008301526104f881846103e8565b905092915050565b6000602082019050610515600083018461049e565b92915050565b600060208201905061053060008301846104ad565b92915050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000819050919050565b60008190509190505600a265627a7a72305820e4eba7dab74878c23493b48feb97733749dbd3d9a238fbdaee586052f5ab435d6c6578706572696d656e74616cf50037"
                    ),
                    arguments: [
                        ABIDynamicCollection(
                            parameters: [
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "12"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "34"
                                            )
                                        )
                                    ]
                                ),
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "78"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "12"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "42"
                                            )
                                        )
                                    ]
                                )
                            ]
                        )
                    ] as [ABIEncodedParameter]
                ),
                (
                    contractCode: BytesFromHexString(
                        hex: "608060405234801561001057600080fd5b50604051610783380380610783833981018060405261003291908101906102ca565b8260009080519060200190610048929190610082565b5081600160006101000a81548160ff0219169083151502179055508060029080519060200190610079929190610082565b505050506103dc565b8280548282559060005260206000209081019282156100d1579160200282015b828111156100d05782518290805190602001906100c09291906100e2565b50916020019190600101906100a2565b5b5090506100de9190610135565b5090565b828054828255906000526020600020908101928215610124579160200282015b82811115610123578251829060001916905591602001919060010190610102565b5b5090506101319190610161565b5090565b61015e91905b8082111561015a57600081816101519190610186565b5060010161013b565b5090565b90565b61018391905b8082111561017f576000816000905550600101610167565b5090565b90565b50805460008255906000526020600020908101906101a49190610161565b50565b600082601f83011215156101ba57600080fd5b81516101cd6101c882610376565b610349565b9150818183526020840193506020810190508360005b8381101561021357815186016101f9888261021d565b8452602084019350602083019250506001810190506101e3565b5050505092915050565b600082601f830112151561023057600080fd5b815161024361023e8261039e565b610349565b9150818183526020840193506020810190508385602084028201111561026857600080fd5b60005b83811015610298578161027e88826102b6565b84526020840193506020830192505060018101905061026b565b5050505092915050565b60006102ae82516103c6565b905092915050565b60006102c282516103d2565b905092915050565b6000806000606084860312156102df57600080fd5b600084015167ffffffffffffffff8111156102f957600080fd5b610305868287016101a7565b9350506020610316868287016102a2565b925050604084015167ffffffffffffffff81111561033357600080fd5b61033f868287016101a7565b9150509250925092565b6000604051905081810181811067ffffffffffffffff8211171561036c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561038d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156103b557600080fd5b602082029050602081019050919050565b60008115159050919050565b6000819050919050565b610398806103eb6000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a14610046575b600080fd5b34801561005257600080fd5b5061005b610073565b60405161006a939291906102b9565b60405180910390f35b6060600060606000600160009054906101000a900460ff16600282805480602002602001604051908101604052809291908181526020016000905b828210156101245783829060005260206000200180548060200260200160405190810160405280929190818152602001828054801561011057602002820191906000526020600020905b815460001916815260200190600101908083116100f8575b5050505050815260200190600101906100ae565b50505050925080805480602002602001604051908101604052809291908181526020016000905b828210156101c1578382906000526020600020018054806020026020016040519081016040528092919081815260200182805480156101ad57602002820191906000526020600020905b81546000191681526020019060010190808311610195575b50505050508152602001906001019061014b565b505050509050925092509250909192565b60006101dd82610318565b808452602084019350836020820285016101f6856102fe565b60005b8481101561022f578383038852610211838351610240565b925061021c8261032e565b91506020880197506001810190506101f9565b508196508694505050505092915050565b600061024b82610323565b80845260208401935061025d8361030b565b60005b8281101561028f576102738683516102aa565b61027c8261033b565b9150602086019550600181019050610260565b50849250505092915050565b6102a481610348565b82525050565b6102b381610354565b82525050565b600060608201905081810360008301526102d381866101d2565b90506102e2602083018561029b565b81810360408301526102f481846101d2565b9050949350505050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60008115159050919050565b60008190509190505600a265627a7a723058209f1a8be541c2b54a130159307f3914aca907c30afd47a917a83ab4d6abadadf56c6578706572696d656e74616cf50037"
                    ),
                    arguments: [
                        ABIDynamicCollection(
                            parameters: [
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "12"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "34"
                                            )
                                        )
                                    ]
                                ),
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "78"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "12"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "42"
                                            )
                                        )
                                    ]
                                )
                            ]
                        ),
                        ABIBoolean(
                            origin: true
                        ),
                        ABIDynamicCollection(
                            parameters: [
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "34"
                                            )
                                        )
                                    ]
                                ),
                                ABIDynamicCollection(
                                    parameters: [
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "78"
                                            )
                                        ),
                                        ABIFixedBytes(
                                            origin: BytesFromHexString(
                                                hex: "42"
                                            )
                                        )
                                    ]
                                )
                            ]
                        ),
                    ] as [ABIEncodedParameter]
                )
            ]
        ).forEach{ contractCode, arguments in
            expect{
                expect{
                    try DeployedGetterContractArgument(
                        network: GanacheLocalNetwork(),
                        sender: Tim(),
                        contractCode: contractCode,
                        arguments: arguments
                    ).value().toHexString()
                }.to(
                    equal(
                        try UnprefixedHexString(
                            bytes: EncodedABITuple(
                                parameters: arguments
                            )
                        ).value()
                    ),
                    description: "Getter contract is expected to return its ctor argument"
                )
                return ()
            }.toNot(
                throwError(),
                description: "Arguments encoding is not expected to throw"
            )
        }
    }

    func testSenderIsReturnedCorrectly() {
        let sender = Tim()
        expect{
            try PrefixedHexString(
                bytes: DecodedABIAddress(
                    abiMessage: ABIMessage(
                        message: DeployedGetterContractArgument(
                            network: GanacheLocalNetwork(),
                            sender: sender,
                            contractCode: BytesFromHexString(
                                hex: "608060405234801561001057600080fd5b5060cc8061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806373d4a13a146044575b600080fd5b348015604f57600080fd5b5060566098565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000339050905600a165627a7a72305820b69fbf1242960573780bb5951aaedbfb2373afad805ccdd56cadda3cc9a910dc0029"
                            ),
                            arguments: []
                        )
                    ),
                    index: 0
                )
            ).value()
        }.to(
            equal(
                sender.rawAddress()
            ),
            description: "Above contract is expected to return the callers address"
        )
    }

}
